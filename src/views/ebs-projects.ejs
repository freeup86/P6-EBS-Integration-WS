<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
  <%- include('partials/header') %>


  <div class="container mt-4">
    <div class="row">
      <div class="col-md-12">
        <h1>EBS Projects</h1>
        <p class="lead">Select an Oracle EBS project to sync with Primavera P6</p>
        
        <div class="card mb-4">
          <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <span>Project List</span>
            <button class="btn btn-light btn-sm" id="syncAllBtn">
              <i class="bi bi-arrow-repeat me-1"></i> Sync All to P6
            </button>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-striped table-hover">
                <thead>
                  <tr>
                    <th>Project Number</th>
                    <th>Project Name</th>
                    <th>Status</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody id="ebsProjectsTable">
                  <% if (projects && projects.length > 0) { %>
                    <% projects.forEach(project => { %>
                      <tr>
                        <td><%= project.projectNumber %></td>
                        <td><%= project.projectName %></td>
                        <td>
                          <span class="badge <%= 
                            project.projectStatus === 'APPROVED' ? 'bg-success' : 
                            (project.projectStatus === 'PENDING' ? 'bg-warning text-dark' : 'bg-secondary') 
                          %>">
                            <%= project.projectStatus %>
                          </span>
                        </td>
                        <td><%= project.plannedStart ? new Date(project.plannedStart).toLocaleDateString() : 'N/A' %></td>
                        <td><%= project.plannedFinish ? new Date(project.plannedFinish).toLocaleDateString() : 'N/A' %></td>
                        <td>
                          <button class="btn btn-primary btn-sm sync-btn" 
                                  data-project-id="<%= project.projectNumber %>" 
                                  data-project-name="<%= project.projectName %>">
                            Sync to P6
                          </button>
                        </td>
                      </tr>
                    <% }); %>
                  <% } else { %>
                    <tr>
                      <td colspan="6" class="text-center">
                        <div class="alert alert-info">
                          No projects found. Please check your connection or API configuration.
                        </div>
                      </td>
                    </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Sync Options Modal -->
  <div class="modal fade" id="syncOptionsModal" tabindex="-1" aria-labelledby="syncOptionsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="syncOptionsModalLabel">Sync Options</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>Project: <strong id="selectedProjectName"></strong></p>
          <p>Select the data you want to sync from EBS to P6:</p>
          
          <div class="form-check mb-2">
            <input class="form-check-input" type="checkbox" id="syncProjectCheck" checked>
            <label class="form-check-label" for="syncProjectCheck">
              Project Information
            </label>
            <small class="text-muted d-block">
              Project Name, Start/End Dates, Status, Project Manager
            </small>
          </div>
          
          <div class="form-check">
            <input class="form-check-input" type="checkbox" id="syncTasksCheck" checked>
            <label class="form-check-label" for="syncTasksCheck">
              Tasks to WBS
            </label>
            <small class="text-muted d-block">
              Task Names, Status, Hierarchy Structure
            </small>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="startSyncBtn">Start Sync</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Sync All Modal -->
  <div class="modal fade" id="syncAllModal" tabindex="-1" aria-labelledby="syncAllModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="syncAllModalLabel">Sync All Projects</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>This will synchronize all eligible EBS projects to Primavera P6.</p>
          <p><strong>Warning:</strong> This operation may take a long time depending on the number of projects.</p>
          <div class="form-check mb-2">
            <input class="form-check-input" type="checkbox" id="syncAllProjectsCheck" checked>
            <label class="form-check-label" for="syncAllProjectsCheck">
              Project Information
            </label>
            <small class="text-muted d-block">
              Project Name, Start/End Dates, Status, Project Manager
            </small>
          </div>
          <div class="form-check">
            <input class="form-check-input" type="checkbox" id="syncAllTasksCheck" checked>
            <label class="form-check-label" for="syncAllTasksCheck">
              Tasks to WBS
            </label>
            <small class="text-muted d-block">
              Task Names, Status, Hierarchy Structure
            </small>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="startSyncAllBtn">Start Bulk Sync</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Sync Progress Modal -->
  <div class="modal fade" id="syncProgressModal" tabindex="-1" aria-labelledby="syncProgressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="syncProgressModalLabel">Sync in Progress</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="text-center mb-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2" id="syncStatusText">Initializing sync...</p>
          </div>
          
          <div class="progress mb-3">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" id="syncProgressBar" style="width: 0%"></div>
          </div>
          
          <div class="alert alert-info" id="syncDetailsContainer">
            <p id="syncDetails">Preparing to sync data from EBS to P6...</p>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" id="cancelSyncBtn">Cancel</button>
          <button type="button" class="btn btn-primary" id="viewResultsBtn" style="display: none;">View Results</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Wait for DOM to be fully loaded
    document.addEventListener('DOMContentLoaded', () => {
      // Add event listeners to sync buttons
      document.querySelectorAll('.sync-btn').forEach(button => {
        button.addEventListener('click', openSyncOptionsModal);
      });
      
      // Start sync button event listener
      document.getElementById('startSyncBtn').addEventListener('click', startSync);
      
      // Cancel sync button event listener
      document.getElementById('cancelSyncBtn').addEventListener('click', () => {
        const modal = bootstrap.Modal.getInstance(document.getElementById('syncProgressModal'));
        modal.hide();
      });
      
      // View results button event listener
      document.getElementById('viewResultsBtn').addEventListener('click', () => {
        window.location.href = '/integration/status';
      });
      
      // Sync All button event listener
      document.getElementById('syncAllBtn').addEventListener('click', openSyncAllModal);
      
      // Start Sync All button event listener
      document.getElementById('startSyncAllBtn').addEventListener('click', startSyncAll);
    });

    // Open sync options modal
    function openSyncOptionsModal(event) {
      const projectId = event.currentTarget.dataset.projectId;
      const projectName = event.currentTarget.dataset.projectName;
      
      document.getElementById('selectedProjectName').textContent = projectName;
      
      // Store project ID for later use
      document.getElementById('startSyncBtn').dataset.projectId = projectId;
      
      // Show the modal
      const modal = new bootstrap.Modal(document.getElementById('syncOptionsModal'));
      modal.show();
    }

    // Start the sync process
    async function startSync() {
      const projectId = this.dataset.projectId;
      const syncProject = document.getElementById('syncProjectCheck').checked;
      const syncTasks = document.getElementById('syncTasksCheck').checked;
      
      // Close options modal
      bootstrap.Modal.getInstance(document.getElementById('syncOptionsModal')).hide();
      
      // Show progress modal
      const progressModal = new bootstrap.Modal(document.getElementById('syncProgressModal'));
      progressModal.show();
      
      // Reset progress UI
      document.getElementById('syncProgressBar').style.width = '0%';
      document.getElementById('syncStatusText').textContent = 'Initializing sync...';
      document.getElementById('syncDetails').textContent = 'Preparing to sync data from EBS to P6...';
      document.getElementById('viewResultsBtn').style.display = 'none';
      
      try {
        // Perform sync operations based on user selections
        if (syncProject) {
          await performSync('project', projectId, 50);
        }
        
        if (syncTasks) {
          await performSync('tasks', projectId, 100);
        }
        
        // Show success message
        document.getElementById('syncStatusText').textContent = 'Sync completed successfully!';
        document.getElementById('syncDetails').textContent = 'All selected data has been synchronized from EBS to P6.';
        document.getElementById('syncProgressBar').classList.remove('progress-bar-animated');
        document.getElementById('viewResultsBtn').style.display = 'block';
        document.getElementById('cancelSyncBtn').textContent = 'Close';
      } catch (error) {
        console.error('Sync error:', error);
        document.getElementById('syncStatusText').textContent = 'Sync failed';
        document.getElementById('syncDetails').textContent = `Error: ${error.message}`;
        document.getElementById('syncProgressBar').classList.remove('progress-bar-animated');
        document.getElementById('syncProgressBar').classList.add('bg-danger');
      }
    }

    // Open sync all modal
    function openSyncAllModal() {
      // Show the modal
      const modal = new bootstrap.Modal(document.getElementById('syncAllModal'));
      modal.show();
    }
    
    // Start the sync all process
    async function startSyncAll() {
      const syncProjects = document.getElementById('syncAllProjectsCheck').checked;
      const syncTasks = document.getElementById('syncAllTasksCheck').checked;
      
      if (!syncProjects && !syncTasks) {
        alert('Please select at least one option to sync.');
        return;
      }
      
      // Close options modal
      bootstrap.Modal.getInstance(document.getElementById('syncAllModal')).hide();
      
      // Show progress modal
      const progressModal = new bootstrap.Modal(document.getElementById('syncProgressModal'));
      progressModal.show();
      
      // Reset progress UI
      document.getElementById('syncProgressBar').style.width = '0%';
      document.getElementById('syncStatusText').textContent = 'Initializing bulk sync...';
      document.getElementById('syncDetails').textContent = 'Preparing to sync all projects from EBS to P6...';
      document.getElementById('viewResultsBtn').style.display = 'none';
      document.getElementById('cancelSyncBtn').textContent = 'Cancel';
      
      try {
        // Perform bulk sync operation for projects and tasks if selected
        if (syncProjects) {
          await performBulkSync('all-projects', syncTasks ? 50 : 100, syncTasks);
          
          if (syncTasks) {
            document.getElementById('syncProgressBar').style.width = '100%';
          }
        }
        
        // Show success message
        document.getElementById('syncStatusText').textContent = 'Bulk sync completed!';
        document.getElementById('syncProgressBar').classList.remove('progress-bar-animated');
        document.getElementById('viewResultsBtn').style.display = 'block';
        document.getElementById('cancelSyncBtn').textContent = 'Close';
      } catch (error) {
        console.error('Bulk sync error:', error);
        document.getElementById('syncStatusText').textContent = 'Bulk sync failed';
        document.getElementById('syncDetails').textContent = `Error: ${error.message}`;
        document.getElementById('syncProgressBar').classList.remove('progress-bar-animated');
        document.getElementById('syncProgressBar').classList.add('bg-danger');
      }
    }
    
    // Perform bulk sync operation and update progress
    async function performBulkSync(type, progressTarget, syncTasks = false) {
      document.getElementById('syncStatusText').textContent = `Performing bulk sync...`;
      document.getElementById('syncDetails').textContent = syncTasks 
        ? `Sending all projects and tasks from EBS to P6...` 
        : `Sending all projects from EBS to P6...`;
      
      // Make API call to perform sync
      const response = await fetch(`/integration/ebs-to-p6/${type}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ syncTasks })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Failed to perform bulk sync`);
      }
      
      const result = await response.json();
      
      // Update progress
      document.getElementById('syncProgressBar').style.width = `${progressTarget}%`;
      
      // Create a detailed status message
      let statusHtml = `
        Successfully synced ${result.results.succeeded} projects.<br>
        Failed: ${result.results.failed} projects.<br>
        Total: ${result.results.total} projects.
      `;
      
      // Add task sync information if available
      if (syncTasks && result.results.taskSync) {
        statusHtml += `<br><br>Tasks synchronized:<br>
          Successfully synced: ${result.results.taskSync.succeeded}<br>
          Failed: ${result.results.taskSync.failed}<br>
          Total: ${result.results.taskSync.total}
        `;
      }
      
      document.getElementById('syncDetails').innerHTML = statusHtml;
      
      return result;
    }
    
    // Perform sync operation and update progress
    async function performSync(type, projectId, progressTarget) {
      document.getElementById('syncStatusText').textContent = `Syncing ${type}...`;
      document.getElementById('syncDetails').textContent = `Sending ${type} data from EBS to P6...`;
      
      // Make API call to perform sync
      const response = await fetch(`/integration/ebs-to-p6/${type}/${projectId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Failed to sync ${type}`);
      }
      
      const result = await response.json();
      
      // Update progress
      document.getElementById('syncProgressBar').style.width = `${progressTarget}%`;
      document.getElementById('syncDetails').textContent = `Successfully synced ${type} data.`;
      
      return result;
    }
  </script>
</body>
</html>